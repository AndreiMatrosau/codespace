name: Build Rl9 Packer Image

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment Stage"
        required: true
        type: choice
        options:
          - "dev"
          - "prod"
  push:
    branches:
      - main
      - feature/live_image

env:
  PRODUCT_VERSION: ${{ vars.PRODUCT_VERSION }}
  VM_NAME: ${{ vars.VM_NAME }}
  VM_USER_NAME: ${{ vars.VM_USER_NAME }}
  QEMU_IMAGE_OUTPUT_DIR: ${{ vars.QEMU_IMAGE_OUTPUT_DIR }}
  QCOW2_IMAGE_NAME: ${{ vars.QCOW2_IMAGE_NAME }}

jobs:
  run_test_live_image:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Install KVM virtualization
        id: install_kvm
        run: |
          chmod +x scripts/install_kvm.sh
          bash scripts/install_kvm.sh
          # sudo apt-get update
          # sudo apt-get install qemu qemu-kvm libvirt-daemon-system -y
          # sudo apt-get install libvirt-clients virt-manager bridge-utils -y
          # sudo usermod -aG kvm $USER
          # sudo chmod 666 /dev/kvm
          # sudo addgroup libvirtd
          # sudo usermod -aG libvirtd $USER
          # sudo adduser $USER libvirt
          # echo 'KERNEL=="kvm", GROUP="kvm", MODE="0660"' | sudo tee /etc/udev/rules.d/99-kvm.rules
          # sudo udevadm control --reload-rules
          # sudo systemctl restart libvirtd
          # export DISPLAY=

      - name: Set up Packer
        id: setup_packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run `packer init`
        id: init_packer
        run: packer init .

      - name: Run `packer validate`
        id: validate_packer
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa
          packer validate -var-file="dev.pkrvars.hcl" \
                          -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
                          -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
                          -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
                          -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
                          -var 'ssh_private_key_file=id_rsa' .
                          
      - name: Build Image
        id: build_packer_image
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa
          PACKER_LOG=1 packer build -var-file="dev.pkrvars.hcl" \
                                    -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
                                    -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
                                    -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
                                    -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
                                    -var 'ssh_private_key_file=id_rsa' \
                                    -force .

      - name: Upload image as artifact
        id: image_artifact
        uses: actions/upload-artifact@v4
        with:
          name: rocky_image
          path: ${{ env.QEMU_IMAGE_OUTPUT_DIR }}/${{ env.QCOW2_IMAGE_NAME }}

      - name: Run Qemu VM
        id: run_vm
        run: |
          set +x
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > rocky_rsa
          set +x
          chmod 600 rocky_rsa
          chmod +x scripts/run-vm.sh
          touch output.json
          bash scripts/run-vm.sh \
            -k rocky_rsa \
            -s scripts/cis-script.sh \
            -o output.json \
            -i ${{ env.QEMU_IMAGE_OUTPUT_DIR }}/${{ env.QCOW2_IMAGE_NAME }} \
            -u ${{ env.VM_USER_NAME}}

      - name: Upload output as artifact
        id: cis_test_output
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: output.json

      - name: Stop and Shutdown a VM
        id: stop_shutdown_vm
        run: |
          chmod +x scripts/shutdown_vm.sh
          bash scripts/shutdown_vm.sh