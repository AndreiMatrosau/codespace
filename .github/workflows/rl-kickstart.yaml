name: CIS tests with Packer Azure VM Image

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment Stage"
        required: true
        type: choice
        options:
          - "dev"
          - "prod"
  push:
    branches:
      - main

env:
  PRODUCT_VERSION: ${{ vars.PRODUCT_VERSION }}
  RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
  LOCATION: ${{ vars.LOCATION }}
  VM_NAME: ${{ vars.VM_NAME }}
  VM_USER_NAME: ${{ vars.VM_USER_NAME }}
  STORAGE_ACCOUNT_NAME: ${{ vars.STORAGE_ACCOUNT_NAME }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  IMAGE_PUBLISHER: ${{ vars.IMAGE_PUBLISHER }}
  IMAGE_OFFER: ${{ vars.IMAGE_OFFER }}
  IMAGE_SKU: ${{ vars.IMAGE_SKU }}
  COMPUTE_GALLERY_NAME: ${{ vars.COMPUTE_GALLERY_NAME }}
  COMPUTE_GALLERY_RESOURCE_GROUP_NAME: ${{ vars.COMPUTE_GALLERY_RESOURCE_GROUP_NAME }}
  IMAGE_DEFINITION_NAME: ${{ vars.IMAGE_DEFINITION_NAME }}
  IMAGE_VERSION: ${{ vars.IMAGE_VERSION }}
  QEMU_IMAGE_OUTPUT_DIR: ${{ vars.QEMU_IMAGE_OUTPUT_DIR }}
  QCOW2_IMAGE_NAME: ${{ vars.QCOW2_IMAGE_NAME }}
  VHD_IMAGE_NAME: ${{ vars.VHD_IMAGE_NAME }}
  SSH_PUBLIC_KEY: ${{ vars.SSH_PUBLIC_KEY }}

jobs:
  # create_infrastrucutre:
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: Checkout Repository
  #       id: checkout
  #       uses: actions/checkout@v4

  #     - name: Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Create Resource Group
  #       id: create_resource_group
  #       run: |
  #         az group create \
  #           --name ${{ env.RESOURCE_GROUP_NAME }} \
  #           --location ${{ env.LOCATION }}

  #     - name: Create Storage Account
  #       id: create_storage_account
  #       run: |
  #         az storage account create \
  #           --name ${{ env.STORAGE_ACCOUNT_NAME }} \
  #           --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
  #           --location ${{ env.LOCATION }} \
  #           --sku Standard_LRS \
  #           --allow-blob-public-access true
        
  #     - name: Create Container
  #       id: create_container
  #       run: |
  #         az storage container create \
  #           --name ${{ env.CONTAINER_NAME }} \
  #           --account-name ${{ env.STORAGE_ACCOUNT_NAME }}

  #     - name: Create Compute Gallery
  #       id: create_compute_gallery
  #       run: |
  #         az sig create \
  #           --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
  #           --gallery-name ${{ env.COMPUTE_GALLERY_NAME }} \
  #           --location ${{ env.LOCATION }}

  #     - name: Create Image Definition
  #       id: create_image_definition
  #       run: |
  #         az sig image-definition create \
  #           --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
  #           --gallery-name ${{ env.COMPUTE_GALLERY_NAME }} \
  #           --gallery-image-definition ${{ env.IMAGE_DEFINITION_NAME }} \
  #           --publisher ${{ env.IMAGE_PUBLISHER }} \
  #           --offer ${{ env.IMAGE_OFFER }} \
  #           --sku ${{ env.IMAGE_SKU }} \
  #           --os-type Linux \
  #           --os-state specialized \
  #           --hyper-v-generation V2

  # build_packer_image:
  #   runs-on: ubuntu-20.04
  #   needs: [create_infrastrucutre]

  #   steps:
  #     - name: Checkout Repository
  #       id: checkout
  #       uses: actions/checkout@v4

  #     - name: Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Install KVM virtualization
  #       id: install_kvm
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install qemu qemu-kvm libvirt-daemon-system -y
  #         sudo apt-get install libvirt-clients virt-manager bridge-utils -y
  #         sudo usermod -aG kvm $USER
  #         sudo chmod 666 /dev/kvm
  #         sudo addgroup libvirtd
  #         sudo usermod -aG libvirtd $USER
  #         sudo adduser $USER libvirt
  #         echo 'KERNEL=="kvm", GROUP="kvm", MODE="0660"' | sudo tee /etc/udev/rules.d/99-kvm.rules
  #         sudo udevadm control --reload-rules
  #         sudo systemctl restart libvirtd
  #         export DISPLAY=

  #     - name: Set up Packer
  #       id: setup_packer
  #       uses: hashicorp/setup-packer@main
  #       with:
  #         version: ${{ env.PRODUCT_VERSION }}

  #     - name: Run `packer init`
  #       id: init_packer
  #       run: packer init .

  #     - name: Run `packer validate`
  #       id: validate_packer
  #       run: |
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
  #         chmod 600 id_rsa
  #         packer validate -var-file="dev.pkrvars.hcl" \
  #                         -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
  #                         -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
  #                         -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
  #                         -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
  #                         -var 'ssh_private_key_file=id_rsa' .
                          
  #     - name: Build Image
  #       id: build_packer_image
  #       run: |
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
  #         chmod 400 id_rsa
  #         PACKER_LOG=1 packer build -var-file="dev.pkrvars.hcl" \
  #                                   -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
  #                                   -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
  #                                   -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
  #                                   -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
  #                                   -var 'ssh_private_key_file=id_rsa' \
  #                                   -force .

  #     - name: Cleanup Github Runner
  #       id: runner_cleanup
  #       run: |
  #         df -h
  #         sudo rm -rf /usr/share/dotnet
  #         sudo rm -rf /opt/ghc
  #         sudo rm -rf "/usr/local/share/boost"
  #         sudo rm -rf "$AGENT_TOOLSDIRECTORY"
  #         sudo apt-get clean
  #         sudo apt-get autoclean
  #         df -h

  #     - name: Convert Image to VHD
  #       id: convert_image_to_vhd
  #       run: |
  #         qemu-img convert \
  #           -f qcow2 \
  #           -o subformat=fixed,force_size \
  #           -S 0 \
  #           -O vpc ${{ env.QEMU_IMAGE_OUTPUT_DIR }}/${{ env.QCOW2_IMAGE_NAME }} ${{ env.VHD_IMAGE_NAME }}

  #     - name: Upload VHD to Storage Account
  #       id: upload_vhd_to_storage_account
  #       run: |
  #         az storage blob upload \
  #           --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
  #           --container-name ${{ env.CONTAINER_NAME }} \
  #           --name ${{ env.VHD_IMAGE_NAME }} \
  #           --file ${{ env.VHD_IMAGE_NAME }} \
  #           --type page \
  #           --overwrite true

  run_vm_custom_image:
    runs-on: ubuntu-20.04
  #   needs: [build_packer_image]

    steps: 
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Create the image version
  #       id: create_image_version
  #       run: |
  #         STORAGE_ACCOUNT_ID=$(az storage account show \
  #           --name ${{ env.STORAGE_ACCOUNT_NAME }} \
  #           --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
  #           --query id \
  #           --output tsv)
  #         VHD_URI=$(az storage blob url \
  #           --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
  #           --container-name ${{ env.CONTAINER_NAME }} \
  #           --name ${{ env.VHD_IMAGE_NAME }} \
  #           --output tsv)
  #         az sig image-version create \
  #           --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
  #           --gallery-name ${{ env.COMPUTE_GALLERY_NAME }} \
  #           --gallery-image-definition ${{ env.IMAGE_DEFINITION_NAME }} \
  #           --gallery-image-version ${{ env.IMAGE_VERSION }} \
  #           --target-regions ${{ env.LOCATION }} \
  #           --replica-count 1 \
  #           --os-vhd-storage-account ${STORAGE_ACCOUNT_ID} \
  #           --os-vhd-uri ${VHD_URI}

      - name: Create VM
        id: create_vm
        run: |
          # az vm create -g rg-packer-vm-ga -n manual-run-1.0.0 --image /subscriptions/c6a76d9c-0f67-4a42-b2a1-3defb05f2aae/resourceGroups/rg-packer-vm-test/providers/Microsoft.Compute/galleries/rl9efigallery/images/rl9img/versions/1.0.0 --specialized --generate-ssh-keys
          IMAGE_ID=$(az sig image-definition list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --gallery-name ${{ env.COMPUTE_GALLERY_NAME }} \
            --query "[].[id]" \
            --output tsv)
          az vm create \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --name ${{ env.VM_NAME }} \
            --image ${IMAGE_ID} \
            --generate-ssh-keys \
            --specialized

      - name: Run CIS Rocky Linux tests
        id: cis_tests
        run: |

          # echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          # chmod 400 id_rsa
          PUBLIC_IP=$(az vm show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.VM_NAME }} \
            --show-details \
            --query publicIps \
            --output tsv)
          echo "{PUBLIC_IP}"
          echo "${{ vars.VM_USER_NAME }}"
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} rocky@{PUBLIC_IP}
          # # ssh -i id_rsa ${{ vars.VM_USER_NAME }}@${PUBLIC_IP} 'bash -s' < cis-script.sh
          # ssh-keyscan -H -t rsa ${PUBLIC_IP}  >> ~/.ssh/known_hosts
          # ssh -i ~/.ssh/id_rsa ${{ vars.VM_USER_NAME }}@${PUBLIC_IP} 'bash -s' < cis-script.sh

      # - name: Run CIS Rocky Linux tests
      #   id: cis_tests
      #   run: |
      #     PUBLIC_IP=$(az vm show \
      #       --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
      #       --name ${{ env.VM_NAME }} \
      #       --show-details \
      #       --query publicIps \
      #       --output tsv)
      #     ssh-keyscan -H -t rsa ${PUBLIC_IP}  >> ~/.ssh/known_hosts
      #     ssh -i ~/.ssh/id_rsa ${{ vars.VM_ADMIN_USER_NAME }}@${PUBLIC_IP} 'bash -s' < cis-script.sh

      - name: Shutdown and dismantle VM
        id: shutdown_dismantle_vm
        run: |
          az vm deallocate \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.VM_NAME }}
          az vm delete \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.VM_NAME }} \
            --force-deletion none \
            --yes
