name: CIS tests with Packer Azure VM Image

on:
  repository_dispatch:
  push:
    branches:
      - main
      - feature/ga_packer_vm_cis_test

env:
  PRODUCT_VERSION: ${{ vars.PRODUCT_VERSION }}
  RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
  LOCATION: ${{ vars.LOCATION }}
  VM_NAME: ${{ vars.VM_NAME }}
  IMAGE: ${{ vars.IMAGE }}
  PLAN_NAME: ${{ vars.PLAN_NAME }}
  PLAN_PRODUCT: ${{ vars.PLAN_PRODUCT }}
  PLAN_PUBLISHER: ${{ vars.PLAN_PUBLISHER }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Packer
        id: setup_packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run `packer init`
        id: init_packer
        run: "packer init ."

      - name: Run `packer validate`
        id: validate_packer
        run: packer validate -var-file="dev.pkrvars.hcl" \
                             -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
                             -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
                             -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
                             -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' .

      - name: Build Image
        id: build_packer_image
        run: packer build -var-file="dev.pkrvars.hcl" \
                          -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
                          -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
                          -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
                          -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
                          .

      - name: Create VM Resource group
        id: create_vm_resource_group
        run: |
          az group create \
           --name ${{ env.RESOURCE_GROUP_NAME }} \
           --location ${{ env.LOCATION }}

      - name: Create VM
        id: create_vm
        run: |
          az vm create \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --name ${{ env.VM_NAME }} \
            --image ${{ env.IMAGE }} \
            --plan-name ${{ env.PLAN_NAME }} \
            --plan-product ${{ env.PLAN_PRODUCT }} \
            --plan-publisher ${{ env.PLAN_PUBLISHER }} \
            --nic-delete-option delete \
            --os-disk-delete-option delete \
            --admin-username azureuser \
            --generate-ssh-keys

      - name: Open VM SSH port
        id: open_vm_ssh_port
        run: |
          az vm open-port \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name ${{ env.VM_NAME }} \
          --port 22      

      - name: Run CIS Rocky Linux tests
        id: cis_tests
        run: |
          PUBLIC_IP=$(az vm show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.VM_NAME }} \
            --show-details \
            --query publicIps \
            --output tsv)
          ssh-keyscan -H -t rsa ${PUBLIC_IP}  >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_rsa azureuser@${PUBLIC_IP} 'bash -s' < cis-script.sh

      - name: Shutdown and dismantle VM
        id: shutdown_dismantle_vm
        run: |
          az vm deallocate \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.VM_NAME }}
          az vm delete \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.VM_NAME }} \
            --force-deletion none \
            --yes

      - name: Delete VM Resource group
        id: delete_vm_rg
        if: always()
        run: |
          az group delete \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --yes
