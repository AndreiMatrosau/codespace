name: CIS tests with Packer Azure VM Image

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment Stage"
        required: true
        type: choice
        options:
          - "dev"
          - "prod"
  push:
    branches:
      - main
      - feature/live_image

env:
  PRODUCT_VERSION: ${{ vars.PRODUCT_VERSION }}
  RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
  LOCATION: ${{ vars.LOCATION }}
  VM_NAME: ${{ vars.VM_NAME }}
  VM_USER_NAME: ${{ vars.VM_USER_NAME }}
  STORAGE_ACCOUNT_NAME: ${{ vars.STORAGE_ACCOUNT_NAME }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  IMAGE_PUBLISHER: ${{ vars.IMAGE_PUBLISHER }}
  IMAGE_OFFER: ${{ vars.IMAGE_OFFER }}
  IMAGE_SKU: ${{ vars.IMAGE_SKU }}
  COMPUTE_GALLERY_NAME: ${{ vars.COMPUTE_GALLERY_NAME }}
  COMPUTE_GALLERY_RESOURCE_GROUP_NAME: ${{ vars.COMPUTE_GALLERY_RESOURCE_GROUP_NAME }}
  IMAGE_DEFINITION_NAME: ${{ vars.IMAGE_DEFINITION_NAME }}
  IMAGE_VERSION: ${{ vars.IMAGE_VERSION }}
  QEMU_IMAGE_OUTPUT_DIR: ${{ vars.QEMU_IMAGE_OUTPUT_DIR }}
  QCOW2_IMAGE_NAME: ${{ vars.QCOW2_IMAGE_NAME }}
  VHD_IMAGE_NAME: ${{ vars.VHD_IMAGE_NAME }}

jobs:
  # create_infrastrucutre:
  #   runs-on: ubuntu-20.04

      # steps:
      #   - name: Checkout Repository
      #     id: checkout
      #     uses: actions/checkout@v4

      # - name: Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Create Resource Group
      #   id: create_resource_group
      #   run: |
      #     az group create \
      #       --name ${{ env.RESOURCE_GROUP_NAME }} \
      #       --location ${{ env.LOCATION }}

      # - name: Create Storage Account
      #   id: create_storage_account
      #   run: |
      #     az storage account create \
      #       --name ${{ env.STORAGE_ACCOUNT_NAME }} \
      #       --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
      #       --location ${{ env.LOCATION }} \
      #       --sku Standard_LRS \
      #       --allow-blob-public-access true
        
      # - name: Create Container
      #   id: create_container
      #   run: |
      #     az storage container create \
      #       --name ${{ env.CONTAINER_NAME }} \
      #       --account-name ${{ env.STORAGE_ACCOUNT_NAME }}

  build_packer_image:
    runs-on: ubuntu-20.04
    # needs: [create_infrastrucutre]

    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      # - name: Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install KVM virtualization
        id: install_kvm
        run: |
          sudo apt-get update
          sudo apt-get install qemu qemu-kvm libvirt-daemon-system -y
          sudo apt-get install libvirt-clients virt-manager bridge-utils -y
          sudo usermod -aG kvm $USER
          sudo chmod 666 /dev/kvm
          sudo addgroup libvirtd
          sudo usermod -aG libvirtd $USER
          sudo adduser $USER libvirt
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0660"' | sudo tee /etc/udev/rules.d/99-kvm.rules
          sudo udevadm control --reload-rules
          sudo systemctl restart libvirtd
          export DISPLAY=

      - name: Set up Packer
        id: setup_packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run `packer init`
        id: init_packer
        run: packer init .

      - name: Run `packer validate`
        id: validate_packer
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa
          packer validate -var-file="dev.pkrvars.hcl" \
                          -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
                          -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
                          -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
                          -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
                          -var 'ssh_private_key_file=id_rsa' .
                          
      - name: Build Image
        id: build_packer_image
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 400 id_rsa
          PACKER_LOG=1 packer build -var-file="dev.pkrvars.hcl" \
                                    -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
                                    -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
                                    -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
                                    -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
                                    -var 'ssh_private_key_file=id_rsa' \
                                    -force .

      # - name: Upload VHD to Storage Account
      #   id: upload_vhd_to_storage_account
      #   run: |
      #     az storage blob upload \
      #       --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
      #       --container-name ${{ env.CONTAINER_NAME }} \
      #       --name ${{ env.VHD_IMAGE_NAME }} \
      #       --file ${{ env.VHD_IMAGE_NAME }} \
      #       --type page \
      #       --overwrite true


  run_cis_tests:
    runs-on: ubuntu-20.04
    needs: [build_packer_image]

    steps: 
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      # - name: Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install KVM virtualization
        id: install_kvm
        run: |
          sudo apt-get update
          sudo apt-get install qemu qemu-kvm libvirt-daemon-system -y
          sudo apt-get install libvirt-clients virt-manager bridge-utils -y
          sudo usermod -aG kvm $USER
          sudo chmod 666 /dev/kvm
          sudo addgroup libvirtd
          sudo usermod -aG libvirtd $USER
          sudo adduser $USER libvirt
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0660"' | sudo tee /etc/udev/rules.d/99-kvm.rules
          sudo udevadm control --reload-rules
          sudo systemctl restart libvirtd
          export DISPLAY=

      - name: Run Qemu VM
        id: run_vm
        run: |
          qemu-system-x86_64 \
            -bios /usr/share/ovmf/OVMF.fd \
            -boot c \
            -drive format=raw,id=drive1,if=none,file=output/rocky9.3 \
            -cpu host \
            -m 4G \
            -smp 2 \
            -enable-kvm \
            -hda output_rl9/rocky9.3 \
            -netdev user,id=usernet0,hostfwd=tcp::3777-:22 \
            -device virtio-net-pci,netdev=usernet0 \
            -display gtk \
            -vga std

      - name: Run CIS Rocky Linux tests
        id: cis_tests
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > rocky_rsa
          chmod 400 rocky_rsa
          ssh -V -o StrictHostKeyChecking=no \
              -i rocky_rsa \
              -p 3777 \
              ${{ vars.VM_USER_NAME }}@localhost 'bash -s' < cis-script.sh > output.json

      - name: Upload output as artifact
        id: cis_test_output
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: output.json

      - name: Stop and Shutdown a VM
        id: stop_shutdown_vm
        run: |
          qm shutdown --forceStop true