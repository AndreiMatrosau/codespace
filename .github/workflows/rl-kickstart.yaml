name: CIS tests with Packer Azure VM Image

on:
  repository_dispatch:
  push:
    branches:
      - main

env:
  PRODUCT_VERSION: ${{ vars.PRODUCT_VERSION }}
  RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
  LOCATION: ${{ vars.LOCATION }}
  VM_NAME: ${{ vars.VM_NAME }}
  PLAN_NAME: ${{ vars.PLAN_NAME }}
  PLAN_PRODUCT: ${{ vars.PLAN_PRODUCT }}
  PLAN_PUBLISHER: ${{ vars.PLAN_PUBLISHER }}
  COMPUTE_GALLERY_NAME: ${{ vars.COMPUTE_GALLERY_NAME }}
  COMPUTE_GALLERY_RESOURCE_GROUP_NAME: ${{ vars.COMPUTE_GALLERY_RESOURCE_GROUP_NAME }}
  VM_ADMIN_USER_NAME: ${{ vars.VM_ADMIN_USER_NAME }}

jobs:
  build_packer_image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      # - name: Set up SSH Key
      #   run: |
      #     mkdir -p ~/.ssh/
      #     echo "${{ secrets.SSH_PACKER_PRIVATE_KEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Checking file change
      #   id: check_file_changed
      #   run: |
      #     diff=$(git diff --name-only HEAD^ HEAD dev.pkvars.hcl)

      #     SourceDiff=$(echo "$diff" | grep -E '^docs/|.md$')
      #     HasDiff=0
      #     if [ -n "$SourceDiff" ]; then
      #       HasDiff=1
      #     fi

      #     echo "::set-output name=docs_changed::$HasDiff"

      - name: Install KVM virtualization
        id: install_kvm
        run: |
          sudo apt-get update
          sudo apt-get install qemu qemu-kvm libvirt-daemon-system -y
          sudo apt-get install virt-manager -y
          sudo usermod -aG kvm $USER
          sudo addgroup libvirtd
          sudo usermod -aG libvirtd $USER
          ls -ld /dev/kvm
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0660"' | sudo tee /etc/udev/rules.d/99-kvm.rules
          sudo udevadm control --reload-rules
          sudo systemctl restart libvirtd
          sudo chmod 666 /dev/kvm
          export DISPLAY=

      - name: Check qemu
        id: check_qemu
        run: |
          kvm-ok
          qemu-system-x86_64 -net nic,model=? 

      - name: Set up Packer
        id: setup_packer
        # if: steps.check_file_changed.outputs.docs_changed == 'True'
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run `packer init`
        id: init_packer
        run: "packer init ."

      - name: Run `packer validate`
        id: validate_packer
        run: |
          packer validate -var-file="dev.pkrvars.hcl" \
                          -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
                          -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
                          -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
                          -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' .

      - name: Build Image
        id: build_packer_image
        run: |
          PACKER_LOG=1 packer build -var-file="dev.pkrvars.hcl" \
                       -var 'client_id=${{ secrets.AZURE_CLIENT_ID }}' \
                       -var 'client_secret=${{ secrets.AZURE_CLIENT_SECRET }}' \
                       -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
                       -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
                       -debug \
                       -force .

  # run_vm_custom_image:
  #   runs-on: ubuntu-latest
  #   # needs: [build_packer_image]

  #   steps: 
  #     - name: Checkout Repository
  #       id: checkout
  #       uses: actions/checkout@v4

  #     - name: Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Create VM Resource group
  #       id: create_vm_resource_group
  #       run: |
  #         az group create \
  #         --name ${{ env.RESOURCE_GROUP_NAME }} \
  #         --location ${{ env.LOCATION }}

  #     - name: Create VM
  #       id: create_vm
  #       run: |
  #         IMAGE_ID=$(az sig image-definition list \
  #           --resource-group ${{ env.COMPUTE_GALLERY_RESOURCE_GROUP_NAME }} \
  #           --gallery-name ${{ env.COMPUTE_GALLERY_NAME }} \
  #           --query "[].[id]" \
  #           --output tsv)
  #         az vm create \
  #           --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
  #           --location ${{ env.LOCATION }} \
  #           --name ${{ env.VM_NAME }} \
  #           --image ${IMAGE_ID} \
  #           --plan-name ${{ env.PLAN_NAME }} \
  #           --plan-product ${{ env.PLAN_PRODUCT }} \
  #           --plan-publisher ${{ env.PLAN_PUBLISHER }} \
  #           --nic-delete-option delete \
  #           --os-disk-delete-option delete \
  #           --admin-username ${{ vars.VM_ADMIN_USER_NAME }} \
  #           --generate-ssh-keys \
  #           --custom-data cloud_init.txt

  #     - name: Open VM SSH port
  #       id: open_vm_ssh_port
  #       run: |
  #         az vm open-port \
  #         --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
  #         --name ${{ env.VM_NAME }} \
  #         --port 22

  #     - name: Run CIS Rocky Linux tests
  #       id: cis_tests
  #       run: |
  #         PUBLIC_IP=$(az vm show \
  #           --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
  #           --name ${{ env.VM_NAME }} \
  #           --show-details \
  #           --query publicIps \
  #           --output tsv)
  #         ssh-keyscan -H -t rsa ${PUBLIC_IP}  >> ~/.ssh/known_hosts
  #         ssh -i ~/.ssh/id_rsa ${{ vars.VM_ADMIN_USER_NAME }}@${PUBLIC_IP} 'bash -s' < cis-script.sh

      # - name: Shutdown and dismantle VM
      #   id: shutdown_dismantle_vm
      #   run: |
      #     az vm deallocate \
      #       --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
      #       --name ${{ env.VM_NAME }}
      #     az vm delete \
      #       --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
      #       --name ${{ env.VM_NAME }} \
      #       --force-deletion none \
      #       --yes

      # - name: Delete VM Resource group
      #   id: delete_vm_rg
      #   if: always()
      #   run: |
      #     az group delete \
      #       --name ${{ env.RESOURCE_GROUP_NAME }} \
      #       --yes

